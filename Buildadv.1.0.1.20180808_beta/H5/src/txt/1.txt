ECMA-262把对象定义为：“无需属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序
的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样，我们可以把ECMAScript的
对象想象成散列表：无非就是一组名值对，其中值可以是数据或函数。
每个对象都是基于一个引用类型创建的，这个引用类型可以是第五章讨论的原生类型，也可以是开发人员定义的类型。
创建自定义对象的最简单方式就是创建一个Object的实例，然后再为它添加属性和方法，如下所示。
var person = new Object();
person.name = "Nicholas";
person.age = 29;
person.job = "Software Engineer";

person.sayName = function(){
	alert(this.name);
}

上面的例子创建了一个名为person的对象，并为它添加了三个属性（那么，age和job）和一个方法（sayName()）.
其中，sayName()方法用于显示this.name（将被解析为person.name）的值。早期的JavaScript开发人员经常使用、
这个模式创建新对象。几年后，对象字面量成为创建这种对象的首选模式。前面的例子用对象字面量
语法可以写成这样。
var person = {
	name:"Nicholas",
	age:29,
	job:"Software",
	
	sayName:function(){
		alert(this.name);
	}
}
这个例子中的person对象与前面例子中的person对象是一样的，都有相同的属性和方法。这些属性在创建实都
带有一些特征值（characteistic），JavaScript通过这些特征值来定义他们的行为。
6.1.1 属性类型
ECMA-262第五版再定义只有内部才用的特性时，描述了属性的各种特征。ECMA-262定义这些
特征是为了实现HavaScript引擎用的，因此再JavaScript中不能直接访问它们。为了表示特性是内部
值，该规范把他们放在了两队方括号中，例如[[Enumberabke]]。
ECMAScirpt有两种属性：数据属性和访问其属性。
1.数据属性
数据属性包含了一个数据值的额位置。再这个位置可以读取和写入值。数据属性有4个描述
其行为的特性。
[[Configurable]]:表示其能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者
能否把属性修改为访问其属性。像前面例子中那样直接再对象上定义的属性，它们的这个特性默认值为true。
Object.defuneProperty()

Object构造函数 
对象字面量方式
工厂模式：
	function createPerson(name,age,job){
		var o = new Object();
		o.name = name;
		o.age = age;
		o.job = job;
		o.sayName = function(){
			alert(this.name);
		}
		return o;
	}
	虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎么直到一个对象的类型）
构造函数模式：
	function Person(name,age,job){
		this.name = name;
		this.age = age;
		this.job = job;
		this.sayName = function(){
			alert(this.name);
		};
	}
原型模式：
	我们创建的每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象
	的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么prototype
	就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例
	共享它所包含的属性和方法。换句话说，不必在构造函数中定义实例对象的信息，而是可以将这些信息直接
	添加到原型对象中，如下面的例子所示。
	function Person(){
	}
	Person.prototype.name = "Nicholas";
	Person.prototype.age = 29;
	Person.prototype.job = "Software Engineer";
	Person.prototype.sayName = function(){
		alert(this.name);
	}
组合使用构造函数模式和原型模式
	创建自定义类型的最常见方式，就是组合私用构造函数模式语原型模式。构造函数模式
	用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例
	属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持
	像构造函数传递参数；可谓是集两种模式之长。
动态原型模式
寄生构造函数模式